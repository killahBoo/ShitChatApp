@using System.Text.Encodings.Web

@if (CurrentRoom is not null)
{
	<h3>@CurrentRoom.RoomName</h3>

	if (CurrentRoom.Users.Count < 2)
	{
		<h4>Waiting for another user to join the room...</h4>
	}
	else
	{
		<p>@CurrentUser.UserName:</p>
		<div class="form-group">
			<label for="message">Message</label>
			<input type="text" class="form-control" id="message" placeholder="Type a message..." @bind="messageInput">
		</div>
		<br />
		@if (messageInput is not null)
		{
			<button @onclick="() => SendMessage()" class="btn btn-primary">Send</button>
		}
		else
		{
			<button class="btn btn-primary" disabled>Send</button>
			<p>Type a message</p>
		}

		<br />
		<ul id="messagesList">
			@foreach (var message in messages)
			{
				<li>@message.UserName: @message.Content</li>
			}
		</ul>
	}
}

@code {
	[CascadingParameter]
	public HubConnection? hubConnection { get; set; }
	[Parameter]
	public ChatRoomDTO? CurrentRoom { get; set; }
	private string? messageInput;
	private List<MessageDTO> messages = new();
	[Parameter] public UserDTO CurrentUser { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (CurrentRoom is null || hubConnection is null) return;

		if (CurrentRoom.Messages is not null)
		{
			messages = CurrentRoom.Messages;
		}

		hubConnection.On<UserDTO>("UserJoined", (newUser) =>
		{
			if(CurrentRoom.Users.All(u => u.UserName != newUser.UserName))
			{
				CurrentRoom.Users.Add(newUser);
				InvokeAsync(StateHasChanged);
			}

		});

		hubConnection.On<MessageDTO>("RecieveMessage", message =>
		{
			message.UserName = HtmlEncoder.Default.Encode(message.UserName);
			message.Content = HtmlEncoder.Default.Encode(message.Content);
			messages.Add(message);
			InvokeAsync(StateHasChanged);
		});
	}

	private async Task SendMessage()
	{
		if (hubConnection is null) return;

		await hubConnection.SendAsync("SendMessage", CurrentRoom, CurrentUser, messageInput);
	}
}
